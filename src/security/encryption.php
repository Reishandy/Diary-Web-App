<?php
/**
 * Encryption module contains functions related to encryption and security for this project
 *
 * @author Reishandy (isthisruxury@gmail.com)
 */
require_once "../../src/config/config.php";

/**
 * This function generates a new random bytes for used as an encryption key
 *
 * @return string Randomly generated key in the form of bytes (not actual string)
 * @author Reishandy (isthisruxury@gmail.com)
 */
function generateKey(): string
{
    return openssl_random_pseudo_bytes(PRIMARY_SIZE);
}

/**
 * This function generates a new random bytes for used as iv or salt
 *
 * @return string Randomly generated bytes (not actual string)
 * @author Reishandy (isthisruxury@gmail.com)
 */
function generateSecondaryKey(): string
{
    return openssl_random_pseudo_bytes(SECONDARY_SIZE);
}

/**
 * This function is used to encrypt string with openssl_encrypt and using AES-256 Algorithm
 *
 * @param string $plaintext String to be encrypted
 * @param string $key Key used to encrypt, must be in the form of bytes
 * @param string $iv vector used to encrypt, must be in the form of bytes
 * @return false|string The encrypted plaintext, or false as failure
 * @author Reishandy (isthisruxury@gmail.com)
 */
function encrypt(string $plaintext, string $key, string $iv): false|string
{
    return openssl_encrypt($plaintext, ENCRYPTION_ALGORITHM, $key, 0, $iv);
}

/**
 * This function is used to decrypt an encrypted string with openssl_encrypt and using AES-256 Algorithm
 *
 * @param string $ciphertext String to be decrypted
 * @param string $key Key used to decrypt, must be in the form of bytes
 * @param string $iv Initialization vector used to decrypt, must be in the form of bytes
 * @return false|string The decrypted ciphertext, or false as failure
 * @author Reishandy (isthisruxury@gmail.com)
 */
function decrypt(string $ciphertext, string $key, string $iv): false|string
{
    return openssl_decrypt($ciphertext, ENCRYPTION_ALGORITHM, $key, 0, $iv);
}

/**
 * Used to encrypt AES-key in the form of string bytes with a password string as the key
 *
 * This function will encrypt the inputted key by converting it into base64, the key used for this encryption will be
 * derived from the inputted password string with PBKDF2 and sha3-256. The algorithm used to encrypt is AES-256, and it
 * will return an array containing the encrypted key, salt used to derive the jey from the password, and iv for
 * encryption that is tied to this specific key, all the return values are in the form of base64 string.
 *
 * @param string $key Key to be encrypted, in the form of bytes
 * @param string $password String used as derivative for the key to encryption
 * @return array [0: encrypted key base64, 1: salt base64, 2: iv base64]
 * @author Reishandy (isthisruxury@gmail.com)
 */
function encryptKey(string $key, string $password): array
{
    $keyString = base64_encode($key);

    $salt = generateSecondaryKey();
    $iv = generateSecondaryKey();

    $userKey = hash_pbkdf2(HASH_ALGORITHM, $password, $salt, ITERATION, PRIMARY_SIZE);
    $encryptedKey = encrypt($keyString, $userKey, $iv);


    return [$encryptedKey, base64_encode($salt), base64_encode($iv)];
}

/**
 * Used to decrypt AES-key in the form of encrypted base64
 *
 * This function is intended to decrypt a key that has gone through encryptKey() function, all arguments need to be
 * in the form of base64 except password. This function will first decode the salt and iv, and then it will use the salt
 * to create a key derived from the inputted password using PBKDF2 sha3-256. The salt is necessary for producing the
 * same key derived from the password. Then this function will decrypt the encrypted key with the iv and derived key from
 * password that will result in a base64 encoded bytes, which this function will decode first before being returned.
 *
 * @param string $password String used as derivative for key decryption
 * @param string $encryptedKey Base64 encoded and encrypted key, originally bytes
 * @param string $salt Base64 encoded salt, originally bytes
 * @param string $iv Base64 encoded iv, originally bytes
 * @return false|string Decrypted key in the form of bytes
 * @author Reishandy (isthisruxury@gmail.com)
 */
function decryptKey(string $password, string $encryptedKey, string $salt, string $iv): false|string
{
    $salt = base64_decode($salt);
    $iv = base64_decode($iv);

    $userKey = hash_pbkdf2(HASH_ALGORITHM, $password, $salt, ITERATION, PRIMARY_SIZE);
    $decryptedKey = decrypt($encryptedKey, $userKey, $iv);

    return base64_decode($decryptedKey);
}

/**
 * Used to encrypt diary content, mood, and tags
 *
 * This function will encrypt the diary content, mood, and tags with the main key and iv, the main key is from stored
 * key session, and the iv is randomly generated.
 * The return value will be an array containing the encrypted content,
 * mood, tags, and iv in the form of base64 string.
 *
 * @param string $key Main key used to encrypt
 * @param string $content Diary content to be encrypted
 * @param string $mood Diary mood to be encrypted
 * @param string $tags Diary tags to be encrypted
 * @return array [0: encrypted content base64, 1: encrypted mood base64, 2: encrypted tags base64, 3: iv base64]
 * @author Reishandy (isthisruxury@gmail.com)
 */
function encryptDiary(string $key, string $content, string $mood, string $tags): array
{
    $iv = generateSecondaryKey();
    $encryptedContent = encrypt($content, $key, $iv);
    $encryptedMood = encrypt($mood, $key, $iv);
    $encryptedTags = encrypt($tags, $key, $iv);

    return [$encryptedContent, $encryptedMood, $encryptedTags, base64_encode($iv)];
}

/**
 * Used to decrypt diary content, mood, and tags
 *
 * This function will decrypt the diary content, mood, and tags with the main key and iv, the main key is from stored
 * key session, and the iv is from the inputted iv. The return value will be an array containing the decrypted content,
 * mood, and tags. All return values are in the form of string.
 *
 * @param string $key Main key used to decrypt
 * @param string $encryptedContent Encrypted content to be decrypted
 * @param string $encryptedMood Encrypted mood to be decrypted
 * @param string $encryptedTags Encrypted tags to be decrypted
 * @param string $iv Initialization vector used to decrypt, generated from encryptDiary()
 * @return false[]|string[]
 * @author Reishandy (isthisruxury@gmail.com)
 */
function decryptDiary(string $key, string $encryptedContent, string $encryptedMood, string $encryptedTags, string $iv): array
{
    $iv = base64_decode($iv);
    $content = decrypt($encryptedContent, $key, $iv);
    $mood = decrypt($encryptedMood, $key, $iv);
    $tags = decrypt($encryptedTags, $key, $iv);

    return [$content, $mood, $tags];
}
